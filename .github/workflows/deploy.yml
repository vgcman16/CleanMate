name: Deploy to TestFlight

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - '**/*.swift'
      - '**/*.xcodeproj/**'
      - '**/*.xcworkspace/**'
      - 'Podfile'
      - 'Podfile.lock'
      - '.github/workflows/deploy.yml'

permissions: write-all

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: macos-15
    env:
      KEYCHAIN_PATH: ~/Library/Keychains/signing_temp.keychain-db

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug Info
        run: |
          echo "Current working directory:"
          pwd
          echo "\nDirectory contents:"
          ls -la
          echo "\nWorkspace files:"
          find . -name "*.xcworkspace" || echo "No workspace found"
          echo "\nXcode project files:"
          find . -name "*.xcodeproj" || echo "No project found"
          echo "\nPodfile location:"
          find . -name "Podfile" || echo "No Podfile found"
          echo "\nExport options file:"
          find . -name "exportOptions.plist" || echo "No exportOptions.plist found"
          echo "\nEnvironment:"
          env | grep -i "xcode\|path\|ruby\|pod"
          echo "\nAvailable Xcode versions:"
          ls -l /Applications/ | grep "Xcode"
          echo "\nSystem Info:"
          sw_vers

      - name: Select Xcode Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.0'

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0'
          bundler-cache: true

      - name: Cache Pods
        uses: actions/cache@v3
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install Cocoapods
        run: |
          gem install cocoapods
          pod install

      - name: Setup Keychain
        env:
          CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          # Create variables
          KEYCHAIN_PASSWORD="temp_password"
          
          # Delete old keychain if exists
          security delete-keychain $KEYCHAIN_PATH || true
          
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -t 3600 -u $KEYCHAIN_PATH
          
          # Import certificate
          echo $CERTIFICATE_BASE64 | base64 --decode > /tmp/certificate.p12
          security import /tmp/certificate.p12 -k $KEYCHAIN_PATH -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          rm /tmp/certificate.p12
          
          # Set partition list
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # List certificates
          security find-identity -v -p codesigning $KEYCHAIN_PATH

      - name: Build and Deploy
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          # Create build directory
          BUILD_DIR="${GITHUB_WORKSPACE}/build"
          mkdir -p "$BUILD_DIR"
          
          # Build the app
          echo "Building app..."
          xcodebuild -workspace CleanMate.xcworkspace \
            -scheme CleanMate \
            -configuration Release \
            -archivePath "$BUILD_DIR/CleanMate.xcarchive" \
            clean archive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
            | xcpretty
          
          # Verify archive exists
          if [ ! -d "$BUILD_DIR/CleanMate.xcarchive" ]; then
            echo "Archive not found!"
            exit 1
          fi
          
          # Export the app
          echo "Exporting app..."
          xcodebuild -exportArchive \
            -archivePath "$BUILD_DIR/CleanMate.xcarchive" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$BUILD_DIR" \
            | xcpretty
          
          # Verify IPA exists
          if [ ! -f "$BUILD_DIR/CleanMate.ipa" ]; then
            echo "IPA not found!"
            exit 1
          fi
          
          # Upload to TestFlight
          echo "Uploading to TestFlight..."
          xcrun altool --upload-app \
            --type ios \
            --file "$BUILD_DIR/CleanMate.ipa" \
            --username "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD"

      - name: Cleanup
        if: always()
        run: |
          security delete-keychain $KEYCHAIN_PATH || true
