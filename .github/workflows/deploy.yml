name: Deploy to TestFlight

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Select Xcode Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.0'

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0'
          bundler-cache: true

      - name: Cache Pods
        uses: actions/cache@v3
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Clean Swift Package Manager
        run: |
          cd CleanMate
          rm -rf *.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/
          rm -rf .build/

      - name: Install Cocoapods
        run: |
          gem install cocoapods
          cd CleanMate
          pod install

      - name: Build
        run: |
          cd CleanMate
          xcodebuild clean build \
            -workspace CleanMate.xcworkspace \
            -scheme CleanMate \
            -destination "platform=iOS Simulator,name=iPhone 15 Pro,OS=17.0" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO

  deploy:
    needs: build-and-test
    name: Deploy to TestFlight
    runs-on: macos-latest
    env:
      KEYCHAIN_PATH: ${{ runner.temp }}/app-signing.keychain-db
      KEYCHAIN_PASSWORD: cleanmate123
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Select Xcode Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.0'

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0'
          bundler-cache: true

      - name: Cache Pods
        uses: actions/cache@v3
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Clean Swift Package Manager
        run: |
          cd CleanMate
          rm -rf *.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/
          rm -rf .build/

      - name: Install Cocoapods
        run: |
          gem install cocoapods
          cd CleanMate
          pod install

      - name: Debug Environment
        run: |
          echo "Current directory: $(pwd)"
          echo "Temp directory: ${{ runner.temp }}"
          echo "Keychain path: $KEYCHAIN_PATH"
          security list-keychains
          ls -la CleanMate

      - name: Set up certificates
        env:
          CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          # Clean up any existing keychain
          security delete-keychain "$KEYCHAIN_PATH" || true
          
          # Create a new keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH" || exit 1
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH" || exit 1
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH" || exit 1
          
          # Import certificate to keychain
          echo -n "$CERTIFICATE_BASE64" | base64 --decode > /tmp/certificate.p12 || exit 1
          security import /tmp/certificate.p12 -k "$KEYCHAIN_PATH" -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign || exit 1
          rm /tmp/certificate.p12
          
          # Add keychain to search list
          security list-keychains -d user -s "$KEYCHAIN_PATH" $(security list-keychains -d user | tr -d '"') || exit 1
          security default-keychain -s "$KEYCHAIN_PATH" || exit 1
          
          # Allow codesign to access keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH" || exit 1
          
          # Verify setup
          security find-identity -v -p codesigning "$KEYCHAIN_PATH" || exit 1

      - name: Prepare Build Directory
        run: |
          mkdir -p CleanMate/build

      - name: Build and Deploy
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: |
          cd CleanMate
          
          # Debug build environment
          echo "Current directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          echo "Xcode version:"
          xcodebuild -version
          
          # Build the app
          xcodebuild -workspace CleanMate.xcworkspace -scheme CleanMate -configuration Release -archivePath build/CleanMate.xcarchive clean archive CODE_SIGN_STYLE=Manual DEVELOPMENT_TEAM=$APPLE_TEAM_ID || exit 1
          
          # Export the app
          xcodebuild -exportArchive -archivePath build/CleanMate.xcarchive -exportOptionsPlist exportOptions.plist -exportPath build || exit 1
          
          # Upload to TestFlight
          xcrun altool --upload-app --type ios --file build/CleanMate.ipa --username "$APPLE_ID" --password "$APPLE_APP_SPECIFIC_PASSWORD" || exit 1

      - name: Cleanup Keychain
        if: always()
        run: |
          security delete-keychain "$KEYCHAIN_PATH" || true
